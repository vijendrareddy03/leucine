{"version":3,"sources":["history.js","SwabSamplings.js","RinseSamplings.js","APISelectComponent.js","CleaningAgentComponent.js","BioBurdenComponent.js","EndoToxinComponent.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","RadioGroup","Radio","Group","SwabSamplings","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","_this2","swabSamplingReq","targetResidueType","react_default","a","createElement","card","es_form","Item","label","onChange","onChangeRadioSwab","value","radioSwab","es_radio","input","swab","defaultRecovery","e","key","handleInputData","type","style","width","marginRight","methodUsed","solventName","solventQuantity","renderSwab","Component","RinseSamplings","rinseSamplingReq","RinseSamplings_RadioGroup","onChangeRadioRinse","radioRinse","rinse","APISelectComponent","lod","lop","es_button","onClick","addSwabSamplingParameters","icon","addRinseSamplingParameters","renderAPI","CleaningAgentComponent","BioBurdenComponent","BioBurdenComponent_RadioGroup","onChangeRadio","tntcTftcReq","renderTntcTftcLimits","EndoToxinComponent","EndoToxinComponent_RadioGroup","Option","Select","DataForm","setState","_","set","target","analyticalMethodId","reason","tntcTnfcReq","tntcLimit","tftcLimit","src_APISelectComponent","src_CleaningAgentComponent","src_BioBurdenComponent","src_EndoToxinComponent","_this3","react_router_dom","react_router","path","_this4","onSubmit","handleSubmit","es_select","handleTargetResidueType","renderSwitch","src_SwabSamplings","src_RinseSamplings","id","Header","Layout","Footer","Content","Sider","App","analyticmethods","columns","title","dataIndex","render","text","record","editMethod","divider","deleteMethod","editRecord","history","push","concat","indexOf","remove","method","index","methods","layout","color","padding","exact","component","textAlign","to","table","background","dataSource","pagination","Form","s","match","params","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60d8676c.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();","import {Form, Input, Radio, Card} from 'antd';\nimport React, {Component} from 'react';\n\nlet RadioGroup = Radio.Group;\nclass SwabSamplings extends Component {\n  constructor(props) {\n    super(props)\n    this.state = props.data\n  }\n  renderSwab() {\n    if (this.props.swabSamplingReq && ((this.props.targetResidueType === 'api') || (this.props.targetResidueType === 'cleaningAgent'))) {\n      return <Card>\n        <Form.Item label=\"Method Used\">\n          <Input\n            value={this.props.data.swab.methodUsed}\n            onChange={(e, key) => this.props.handleInputData(e, 'swab.methodUsed')}\n            type=\"Text\"\n            style={{\n            width: '30%',\n            marginRight: 8\n          }}/>\n        </Form.Item>\n        <Form.Item label=\"Solvent Name & Solvent Quantity\">\n          <Input\n            value={this.props.data.swab.solventName}\n            onChange={(e, key) => this.props.handleInputData(e, 'swab.solventName')}\n            type=\"text\"\n            style={{\n            width: '30%',\n            marginRight: 8\n          }}/>\n          <Input\n            value={this.props.data.solventQuantity}\n            onChange={(e, key) => this.props.handleInputData(e, 'swab.solventQuantity')}\n            type=\"number\"\n            style={{\n            width: '30%',\n            marginRight: 8\n          }}/>\n        </Form.Item>\n        <Form.Item label=\"Default Recovery %\">\n          <Input\n            value={this.props.data.swab.defaultRecovery}\n            onChange={(e, key) => this.props.handleInputData(e, 'swab.defaultRecovery')}\n            type=\"number\"\n            style={{\n            width: '30%',\n            marginRight: 8\n          }}/>\n        </Form.Item>\n      </Card>;\n    }\n    if (this.props.swabSamplingReq && ((this.props.targetResidueType === 'bioBurden') || (this.props.targetResidueType === 'endoToxin'))) {\n      return <Card>\n        <Form.Item label=\"Use Recovery For Swab ?\">\n          <RadioGroup\n            onChange={this.props.onChangeRadioSwab}\n            value={this.props.radioSwab}>\n            <Radio value={true}>Yes</Radio>\n            <Radio value={false}>No</Radio>\n          </RadioGroup>\n        </Form.Item>\n        <Form.Item label=\"Default Recovery %\">\n          <Input\n            value={this.props.data.swab.defaultRecovery}\n            onChange={(e, key) => this.props.handleInputData(e, 'swab.defaultRecovery')}\n            type=\"number\"\n            style={{\n            width: '30%',\n            marginRight: 8\n          }}/>\n        </Form.Item>\n      </Card>;\n    }\n    return (\n      <div></div>\n    )\n  }\n  render() {\n    return this.renderSwab();\n  }\n}\nexport default SwabSamplings;","import {Form, Input, Radio, Card} from 'antd';\nimport React, {Component} from 'react';\n\nlet RadioGroup = Radio.Group;\nclass RinseSamplings extends Component {\n  constructor(props) {\n    super(props)\n    this.state = props.data\n  }\n  renderSwab() {\n    if (this.props.rinseSamplingReq && ((this.props.targetResidueType === 'api') || (this.props.targetResidueType === 'cleaningAgent'))) {\n      return <Card>\n        <Form.Item label=\"Method Used\">\n          <Input\n            value={this.props.data.rinse.methodUsed}\n            onChange={(e, key) => this.props.handleInputData(e, 'rinse.methodUsed')}\n            type=\"Text\"\n            style={{\n            width: '30%',\n            marginRight: 8\n          }}/>\n        </Form.Item>\n        <Form.Item label=\"Solvent Name & Solvent Quantity\">\n          <Input\n            value={this.props.data.rinse.solventName}\n            onChange={(e, key) => this.props.handleInputData(e, 'rinse.solventName')}\n            type=\"text\"\n            style={{\n            width: '30%',\n            marginRight: 8\n          }}/>\n          <Input\n            value={this.props.data.rinse.solventQuantity}\n            onChange={(e, key) => this.props.handleInputData(e, 'rinse.solventQuantity')}\n            type=\"number\"\n            style={{\n            width: '30%',\n            marginRight: 8\n          }}/>\n        </Form.Item>\n        <Form.Item label=\"Default Recovery %\">\n          <Input\n            value={this.props.data.rinse.defaultRecovery}\n            onChange={(e, key) => this.props.handleInputData(e, 'rinse.defaultRecovery')}\n            type=\"number\"\n            style={{\n            width: '30%',\n            marginRight: 8\n          }}/>\n        </Form.Item>\n      </Card>;\n    }\n    if (this.props.rinseSamplingReq && ((this.props.targetResidueType === 'bioBurden') || (this.props.targetResidueType === 'endoToxin'))) {\n      return <Card>\n        <Form.Item label=\"Use Recovery For Rinse ?\">\n          <RadioGroup\n            onChange={this.props.onChangeRadioRinse}\n            value={this.props.radioRinse}>\n            <Radio value={true}>Yes</Radio>\n            <Radio value={false}>No</Radio>\n          </RadioGroup>\n        </Form.Item>\n        <Form.Item label=\"Default Recovery %\">\n          <Input\n            value={this.props.data.rinse.defaultRecovery}\n            onChange={(e, key) => this.props.handleInputData(e, 'rinse.defaultRecovery')}\n            type=\"number\"\n            style={{\n            width: '30%',\n            marginRight: 8\n          }}/>\n        </Form.Item>\n      </Card>;\n    }\n    return (\n      <div></div>\n    )\n  }\n  render() {\n    return this.renderSwab();\n  }\n}\nexport default RinseSamplings;","import {Form, Icon, Input, Button, Card} from 'antd';\nimport React, {Component} from 'react';\n\nclass APISelectComponent extends Component {\n  constructor(props) {\n    super(props)\n    this.state = props.data\n  }\n  // componentDidUpdate(prevProps) {   // Typical usage (don't forget to compare\n  // props):   if (this.state.lod !== prevProps.lod) {     this.setState(t);   } }\n  renderAPI() {\n    return <Card>\n      <Form.Item label=\"LOD & LOP\">\n        <Input\n          value={this.props.data.lod}\n          onChange={(e, key) => this.props.handleInputData(e, 'lod')}\n          type=\"number\"\n          style={{\n          width: '30%',\n          marginRight: 8\n        }}/>\n        <Input\n          value={this.props.data.lop}\n          type=\"number\"\n          onChange={(e, key) => this.props.handleInputData(e, 'lop')}\n          style={{\n          width: '30%',\n          marginRight: 8\n        }}/>\n      </Form.Item>\n      <Button\n        type=\"dashed\"\n        onClick={this.props.addSwabSamplingParameters}\n        style={{\n        width: \"auto\"\n      }}>\n        <Icon type={this.props.swabSamplingReq\n          ? 'minus'\n          : 'plus'}/> {this.props.swabSamplingReq\n          ? 'Remove SWAB Sampling Parameters'\n          : ' Configure SWAB Sampling Parameters'}\n      </Button>\n      <Button\n        type=\"dashed\"\n        onClick={this.props.addRinseSamplingParameters}\n        style={{\n        width: 'auto'\n      }}>\n        <Icon\n          type={this.props.rinseSamplingReq\n          ? 'minus'\n          : 'plus'}/> {this.props.rinseSamplingReq\n          ? 'Remove Rinse Sampling Parameters'\n          : ' Configure Rinse Sampling Parameters'}\n      </Button>\n\n    </Card>;\n\n  }\n  render() {\n    return this.renderAPI();\n  }\n}\n\nexport default APISelectComponent;","import {Form, Icon, Input, Button, Card} from 'antd';\nimport React, {Component} from 'react';\n\nclass CleaningAgentComponent extends Component {\n  constructor(props) {\n    super(props)\n    this.state = props.data\n  }\n  renderAPI() {\n    return <Card>\n      <Form.Item label=\"LOD & LOP\">\n        <Input\n          value={this.props.data.lod}\n          onChange={(e, key) => this.props.handleInputData(e, 'lod')}\n          type=\"number\"\n          style={{\n          width: '30%',\n          marginRight: 8\n        }}/>\n        <Input\n          value={this.props.data.lop}\n          onChange={(e, key) => this.props.handleInputData(e, 'lop')}\n          type=\"number\"\n          style={{\n          width: '30%',\n          marginRight: 8\n        }}/>\n      </Form.Item>\n      <Button\n        type=\"dashed\"\n        onClick={this.props.addSwabSamplingParameters}\n        style={{\n        width: 'auto'\n      }}>\n        <Icon type={this.props.swabSamplingReq\n          ? 'minus'\n          : 'plus'}/> {this.props.swabSamplingReq\n          ? 'Remove SWAB Sampling Parameters'\n          : ' Configure SWAB Sampling Parameters'}\n      </Button>\n      <Button\n        type=\"dashed\"\n        onClick={this.props.addRinseSamplingParameters}\n        style={{\n        width: 'auto'\n      }}>\n        <Icon\n          type={this.props.rinseSamplingReq\n          ? 'minus'\n          : 'plus'}/> {this.props.rinseSamplingReq\n          ? 'Remove Rinse Sampling Parameters'\n          : ' Configure Rinse Sampling Parameters'}\n      </Button>\n\n    </Card>;\n\n  }\n  render() {\n    return this.renderAPI();\n  }\n}\n\nexport default CleaningAgentComponent;","import {Form, Icon, Input, Button, Radio, Card} from 'antd';\nimport React, {Component} from 'react';\n\nlet RadioGroup = Radio.Group;\nclass BioBurdenComponent extends Component {\n  constructor(props) {\n    super(props)\n    this.state = props.data\n  }\n  renderAPI() {\n    return <Card>\n      <Form.Item label=\"Method Used\">\n        <Input\n          value={this.props.data.methodUsed}\n          onChange={(e, key) => this.props.handleInputData(e, 'methodUsed')}\n          style={{\n          width: '60%',\n          marginRight: 8\n        }}/>\n      </Form.Item>\n      <Form.Item label=\"TNTC TNFC Required ?\">\n        <RadioGroup onChange={this.props.onChangeRadio} value={this.props.tntcTftcReq}>\n          <Radio value={true}>Yes</Radio>\n          <Radio value={false}>No</Radio>\n        </RadioGroup>\n      </Form.Item>\n      {this\n        .props\n        .renderTntcTftcLimits()}\n      <Button\n        type=\"dashed\"\n        onClick={this.props.addSwabSamplingParameters}\n        style={{\n        width: 'auto'\n      }}>\n        <Icon type={this.props.swabSamplingReq\n          ? 'minus'\n          : 'plus'}/> {this.props.swabSamplingReq\n          ? 'Remove SWAB Sampling Parameters'\n          : ' Configure SWAB Sampling Parameters'}\n      </Button>\n      <Button\n        type=\"dashed\"\n        onClick={this.props.addRinseSamplingParameters}\n        style={{\n        width: 'auto'\n      }}>\n        <Icon\n          type={this.props.rinseSamplingReq\n          ? 'minus'\n          : 'plus'}/> {this.props.rinseSamplingReq\n          ? 'Remove Rinse Sampling Parameters'\n          : ' Configure Rinse Sampling Parameters'}\n      </Button>\n    </Card>;\n\n  }\n  render() {\n    return this.renderAPI();\n  }\n}\n\nexport default BioBurdenComponent;","import {Form, Icon, Input, Button, Radio, Card} from 'antd';\nimport React, {Component} from 'react';\n\nlet RadioGroup = Radio.Group;\nclass EndoToxinComponent extends Component {\n  constructor(props) {\n    super(props)\n    this.state = props.data\n  }\n  renderAPI() {\n    return <Card>\n      <Form.Item label=\"Method Used\">\n        <Input\n          value={this.props.data.methodUsed}\n          onChange={(e, key) => this.props.handleInputData(e, 'methodUsed')}\n          style={{\n          width: '60%',\n          marginRight: 8\n        }}/>\n      </Form.Item>\n      <Form.Item label=\"TNTC TNFC Required ?\">\n        <RadioGroup onChange={this.props.onChangeRadio} value={this.props.tntcTftcReq}>\n          <Radio value={true}>Yes</Radio>\n          <Radio value={false}>No</Radio>\n        </RadioGroup>\n      </Form.Item>\n\n      {this\n        .props\n        .renderTntcTftcLimits()}\n      <Button\n        type=\"dashed\"\n        onClick={this.props.addSwabSamplingParameters}\n        style={{\n        width: 'auto'\n      }}>\n        <Icon type={this.props.swabSamplingReq\n          ? 'minus'\n          : 'plus'}/> {this.props.swabSamplingReq\n          ? 'Remove SWAB Sampling Parameters'\n          : ' Configure SWAB Sampling Parameters'}\n      </Button>\n      <Button\n        type=\"dashed\"\n        onClick={this.props.addRinseSamplingParameters}\n        style={{\n        width: 'auto'\n      }}>\n        <Icon\n          type={this.props.rinseSamplingReq\n          ? 'minus'\n          : 'plus'}/> {this.props.rinseSamplingReq\n          ? 'Remove Rinse Sampling Parameters'\n          : ' Configure Rinse Sampling Parameters'}\n      </Button>\n    </Card>;\n\n  }\n  render() {\n    return this.renderAPI();\n  }\n}\n\nexport default EndoToxinComponent;","import {Form, Input, Select, Button, Card} from 'antd';\nimport React, {Component} from 'react';\nimport {BrowserRouter as Router, Route, Link} from \"react-router-dom\";\nimport SwabSamplings from './SwabSamplings';\nimport RinseSamplings from './RinseSamplings';\nimport APISelectComponent from './APISelectComponent';\nimport CleaningAgentComponent from './CleaningAgentComponent';\nimport BioBurdenComponent from './BioBurdenComponent';\nimport EndoToxinComponent from './EndoToxinComponent';\nimport _ from 'lodash';\n\nconst Option = Select.Option;\n// {   analyticalMethodId: '',   reason:'',   targetResidueType: '',\n// lod:'',lop:'',methodUsed:'',   tntcTnfcReq: '',   tntcLimit: '',   tftcLimit:\n// '',   swabSamplingReq: '',   rinseSamplingReq: '',   radioSwab: '',\n// radioRinse: '',   swab: {     methodUsed: '',     solventName:'',\n// solventQuantity:'',     defaultRecovery:''   },   rinse:{     methodUsed: '',\n//     solventName:'',     solventQuantity:'',     defaultRecovery:''   } }\nclass DataForm extends Component {\n\n  constructor(props) {\n    super(props)\n    if (props.data) {\n      this.state = props.data;\n    } else {\n      this.state = {\n        analyticalMethodId: '',\n        reason: '',\n        targetResidueType: '',\n        lod: '',\n        lop: '',\n        methodUsed: '',\n        tntcTnfcReq: '',\n        tntcLimit: '',\n        tftcLimit: '',\n        swabSamplingReq: '',\n        rinseSamplingReq: '',\n        radioSwab: '',\n        radioRinse: '',\n        swab: {\n          methodUsed: '',\n          solventName: '',\n          solventQuantity: '',\n          defaultRecovery: ''\n        },\n        rinse: {\n          methodUsed: '',\n          solventName: '',\n          solventQuantity: '',\n          defaultRecovery: ''\n        }\n      }\n    }\n\n  }\n\n  handleInputData = (e, key) => {\n    this.setState(_.set({}, key, e.target.value));\n  }\n\n  handleTargetResidueType(e) {\n    let state = this.state;\n    state.targetResidueType = e;\n    this.setState(state);\n  }\n\n  onChangeRadio = (e, key) => {\n    this.setState(_.set({}, key, e.target.value));\n  }\n\n  addSwabSamplingParameters = () => {\n    this.setState({\n      swabSamplingReq: !this.state.swabSamplingReq\n    });\n\n  }\n  addRinseSamplingParameters = () => {\n    this.setState({\n      rinseSamplingReq: !this.state.rinseSamplingReq\n    });\n  }\n  renderSwitch() {\n    switch (this.state.targetResidueType) {\n      case 'api':\n        return (\n          <APISelectComponent\n            data={this.state}\n            swabSamplingReq={this.state.swabSamplingReq}\n            addSwabSamplingParameters={() => this.addSwabSamplingParameters()}\n            rinseSamplingReq={this.state.rinseSamplingReq}\n            addRinseSamplingParameters={() => this.addRinseSamplingParameters()}\n            handleInputData={(e, key) => this.handleInputData(e, key)}></APISelectComponent>\n        );\n      case 'cleaningAgent':\n        return (\n          <CleaningAgentComponent\n            data={this.state}\n            swabSamplingReq={this.state.swabSamplingReq}\n            addSwabSamplingParameters={() => this.addSwabSamplingParameters()}\n            rinseSamplingReq={this.state.rinseSamplingReq}\n            addRinseSamplingParameters={() => this.addRinseSamplingParameters()}\n            handleInputData={(e, key) => this.handleInputData(e, key)}></CleaningAgentComponent>\n        );\n      case 'bioBurden':\n        return (\n          <BioBurdenComponent\n            data={this.state}\n            onChangeRadio={(e) => this.onChangeRadio(e, 'tntcTftcReq')}\n            tntcTftcReq={this.state.tntcTftcReq}\n            addSwabSamplingParameters={() => this.addSwabSamplingParameters()}\n            swabSamplingReq={this.state.swabSamplingReq}\n            addRinseSamplingParameters={() => this.addRinseSamplingParameters()}\n            rinseSamplingReq={this.state.rinseSamplingReq}\n            renderTntcTftcLimits={() => this.renderTntcTftcLimits()}\n            handleInputData={(e, key) => this.handleInputData(e, key)}></BioBurdenComponent>\n        );\n\n      case 'endoToxin':\n        return (\n          <EndoToxinComponent\n            data={this.state}\n            onChangeRadio={(e) => this.onChangeRadio(e, 'tntcTftcReq')}\n            tntcTftcReq={this.state.tntcTftcReq}\n            addSwabSamplingParameters={() => this.addSwabSamplingParameters()}\n            swabSamplingReq={this.state.swabSamplingReq}\n            addRinseSamplingParameters={() => this.addRinseSamplingParameters()}\n            rinseSamplingReq={this.state.rinseSamplingReq}\n            renderTntcTftcLimits={() => this.renderTntcTftcLimits()}\n            handleInputData={(e, key) => this.handleInputData(e, key)}></EndoToxinComponent>\n        );\n      default:\n        return <div></div>;\n    }\n  }\n\n  renderTntcTftcLimits() {\n    if (this.state.tntcTftcReq) {\n      return <div>\n        <Form.Item label=\"TNTC & TFTC\">\n          <Input\n            value={this.state.tntcLimit}\n            onChange={(e) => this.handleInputData(e, 'tntcLimit')}\n            type=\"number\"\n            style={{\n            width: '30%',\n            marginRight: 8\n          }}/>\n          <Input\n            value={this.state.tftcLimit}\n            onChange={(e) => this.handleInputData(e, 'tftcLimit')}\n            type=\"number\"\n            style={{\n            width: '30%',\n            marginRight: 8\n          }}/>\n        </Form.Item>\n      </div>;\n    }\n\n  }\n\n  routeBack() {\n    return (\n      <Router>\n        <Route path=\"/\"></Route>\n      </Router>\n    )\n  }\n\n  render() {\n    return (\n      <Card>\n        <Form onSubmit={this.handleSubmit}>\n\n          <Form.Item label=\"Analytical Method ID\">\n            <Input\n              value={this.state.analyticalMethodId}\n              onChange={(e) => this.handleInputData(e, 'analyticalMethodId')}\n              style={{\n              width: '60%',\n              marginRight: 8\n            }}/>\n          </Form.Item>\n          <Form.Item label=\"Target Residue Type\">\n            <Select\n              style={{\n              width: 120\n            }}\n              onChange={(e) => this.handleTargetResidueType(e)}\n              value={this.state.targetResidueType}>\n              <Option value=\"api\">API</Option>\n              <Option value=\"cleaningAgent\">Cleaning Agent</Option>\n              <Option value=\"bioBurden\">BioBurden</Option>\n              <Option value=\"endoToxin\">EndoToxin</Option>\n            </Select>\n          </Form.Item>\n          {this.renderSwitch()}\n          <SwabSamplings\n            data={this.state}\n            swabSamplingReq={this.state.swabSamplingReq}\n            targetResidueType={this.state.targetResidueType}\n            radioSwab={this.state.radioSwab}\n            onChangeRadioSwab={(e) => this.onChangeRadio(e, 'radioSwab')}\n            handleInputData={(e, key) => this.handleInputData(e, key)}></SwabSamplings>\n          <RinseSamplings\n            data={this.state}\n            rinseSamplingReq={this.state.rinseSamplingReq}\n            targetResidueType={this.state.targetResidueType}\n            radioRinse={this.state.radioRinse}\n            onChangeRadioRinse={(e) => this.onChangeRadio(e, 'radioRinse')}\n            handleInputData={(e, key) => this.handleInputData(e, key)}></RinseSamplings>\n\n          <Form.Item label=\"Reason\">\n            <Input\n              value={this.state.reason}\n              onChange={(e, key) => this.handleInputData(e, 'reason')}\n              style={{\n              width: '60%',\n              marginRight: 8\n            }}/>\n          </Form.Item>\n          <Button\n            type=\"primary\"\n            onClick={() => this.props.handleSubmit(this.state, this.props.id)}>Submit</Button>\n        </Form>\n      </Card>\n    );\n  }\n}\n\nexport default DataForm;","import React, {Component} from 'react';\nimport {Router, Route, Link} from \"react-router-dom\";\nimport history from \"./history\";\nimport './App.css';\nimport _ from 'lodash'\n\nimport DataForm from './Form'\n\nimport {Table, Divider, Button, Icon, Layout} from 'antd';\n\nconst {Header, Footer, Sider, Content} = Layout;\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      analyticmethods: [\n        {\n          analyticalMethodId: 'ASD344W22',\n          reason: 'this is a reason',\n          targetResidueType: 'api',\n          lod: '22',\n          lop: '11',\n          methodUsed: '',\n          tntcTftcReq: '',\n          tntcLimit: '',\n          tftcLimit: '',\n          swabSamplingReq: '',\n          rinseSamplingReq: '',\n          radioSwab: '',\n          radioRinse: '',\n          swab: {\n            methodUsed: '',\n            solventName: '',\n            solventQuantity: '',\n            defaultRecovery: ''\n          },\n          rinse: {\n            methodUsed: '',\n            solventName: '',\n            solventQuantity: '',\n            defaultRecovery: ''\n          }\n\n        }, {\n          analyticalMethodId: 'ASDAWEI23344W22',\n          reason: 'this is a reason',\n          targetResidueType: 'api',\n          lod: '22',\n          lop: '11',\n          methodUsed: '',\n          tntcTftcReq: '',\n          tntcLimit: '',\n          tftcLimit: '',\n          swabSamplingReq: '',\n          rinseSamplingReq: '',\n          radioSwab: '',\n          radioRinse: '',\n          swab: {\n            methodUsed: '',\n            solventName: '',\n            solventQuantity: '',\n            defaultRecovery: ''\n          },\n          rinse: {\n            methodUsed: '',\n            solventName: '',\n            solventQuantity: '',\n            defaultRecovery: ''\n          }\n        }\n      ]\n    }\n\n    this.columns = [\n      {\n        title: 'Analytical Method Id',\n        dataIndex: 'analyticalMethodId',\n        key: 'analyticalMethodId'\n      }, {\n        title: 'Reason',\n        dataIndex: 'reason',\n        key: 'reason'\n      }, {\n        title: 'TargetResidueType',\n        dataIndex: 'targetResidueType',\n        key: 'targetResidueType'\n      }, {\n        title: 'Action',\n        key: 'action',\n        render: (text, record) => (\n          <span>\n            <a onClick={() => this.editMethod(record)}><Icon type=\"edit\"/></a>\n            <Divider type=\"vertical\"/>\n            <a onClick={() => this.deleteMethod(record)}><Icon type=\"delete\"/></a>\n          </span>\n        )\n      }\n    ];\n  }\n  editMethod(record) {\n    this.setState({editRecord: record})\n    history.push(`/edit/${this.state.analyticmethods.indexOf(record)}`);\n  }\n  deleteMethod(record) {\n    let analyticmethods = this.state.analyticmethods\n    _.remove(analyticmethods, (a) => a === record)\n    this.setState({analyticmethods: analyticmethods})\n  }\n  handleSubmit(method, index) {\n    let methods = this.state.analyticmethods;\n    if (!index) {\n      methods.push(method);\n    } else {\n      methods[index] = method;\n    }\n    this.setState({analyticmethods: methods});\n    history.push('/');\n  }\n  render() {\n    return (\n      <div>\n        <Router history={history}>\n          <Layout>\n            <Header style={{\n              color: 'white'\n            }}>\n              <Icon type=\"radar-chart\"/>&nbsp; Analytical Methods\n            </Header>\n            <Content style={{\n              padding: '50px'\n            }}>\n              <Route\n                path=\"/\"\n                exact\n                component={() => (\n                <div>\n                  <div\n                    style={{\n                    padding: '0 0 20px 0',\n                    textAlign: 'right'\n                  }}>\n                    <Link to=\"/new\">\n                      <Button type=\"primary\">New\n                        <Icon type=\"plus-circle\"/>\n                      </Button>\n                    </Link>\n                  </div>\n                  <Table\n                    style={{\n                    background: 'white'\n                  }}\n                    columns={this.columns}\n                    dataSource={this.state.analyticmethods}\n                    pagination={false}/>\n                </div>\n              )}/>\n              <Route\n                path=\"/new/\"\n                component={() => <DataForm handleSubmit={(s) => this.handleSubmit(s)}/>}/>\n              <Route\n                path=\"/edit/:index\"\n                component={(props) => <DataForm\n                data={this.state.analyticmethods[props.match.params.index]}\n                id={props.match.params.index}\n                handleSubmit={(s, index) => this.handleSubmit(s, index)}/>}/>\n            </Content>\n            <Footer style={{\n              textAlign: 'right'\n            }}></Footer>\n          </Layout>\n        </Router>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}